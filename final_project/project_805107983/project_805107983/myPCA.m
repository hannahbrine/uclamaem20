%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Name of the script: myPCA.m
%
% Description: This program implements the PCA algorithm to find the
% important components of the data by sorting the eigenvalues. The data
% will be used to visualize the data in a later program. 
%
% Name: Hannah Brine (hannahebrine@gmail.com) 
% UID: 805107983
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [coeffOrth,pcaData] = myPCA(data)
 % myPCA analyzes the principal components of given COVID-19 statistical data from multiple countries - covid_countries.csv
 % Inputs:
 % data: A nxp matrix representing only the numerical parts of the dataset
 % Outputs:
 % coeffOrth: a pxp matrix whose columns are the eigenvectors corresponding to the sorted eigenvalues
 % pcaData: a nxp matrix representing the data projected onto the principal components
 
 rows = 27;
 columns = 6;
 data_normal = zeros(rows:columns); % preallocating arrays
 
 % Normalizing data
 for i = 1:columns
     avg = mean(data(:,i));
     stddev = std(data(:, i));
     data_normal(:,i) = (data(:,i) - avg) / stddev;
 end
 
 % covariance matrix computation
 C = cov(data_normal);
 % compute eigenvalues/eigenvectors
 [eigenvectors, eigenvalues] = eig(C);
 
 % sorts the eigenvalues from greatest to smallest based on their absoThelute value 
 [eigenvalues, index] = sort(diag(eigenvalues), 'descend', 'ComparisonMethod', 'abs');
 % sorting the eigenvectors based on the index generated by the sorting of
 % the eigenvalues
 
 coeffOrth = eigenvectors(:, index);
 pcaData = data_normal * coeffOrth;
end
